{"version":3,"file":"static/js/278.78f8fe63.chunk.js","mappings":"kLACA,EAAuB,yB,SCkBvB,EAdmB,SAAC,GAA8B,IAA5BA,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAC9B,OACI,+BACI,wBACKD,EAAWE,QAAUF,EAAWG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACjC,eAAaC,UAAWC,EAAxB,UACI,SAAC,EAAAC,KAAD,CAAMC,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMV,GAA1C,SAAuDG,KADlDC,EADwB,OAQpD,C,4ICoCD,UA/Ce,WACX,OAAwCO,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMhB,GAAWiB,EAAAA,EAAAA,MACjBC,QAAQC,IAAIP,EAAaQ,IAAI,YAE7BC,EAAAA,EAAAA,YAAU,WAAM,wCAKZ,6GAE8BC,EAAAA,EAAAA,gBAAoBV,EAAaQ,IAAI,WAFnE,OAEcG,EAFd,OAGQP,EAAaO,EAAQC,SAH7B,gDAMQC,IAAAA,OAAAA,QAAwB,KAAMC,SANtC,sGALY,sBACPd,EAAaQ,IAAI,WADV,mCAiBZG,EAEH,GAAE,CAACX,IASJ,OACI,iBAAKP,UAAU,UAAf,WAEI,kBAAMsB,SAVO,SAACC,GAClBA,EAAEC,iBACFX,QAAQY,IAAIF,EAAEG,OAAOC,SAASC,YAAYC,OAC1CrB,EAAgB,CAAEsB,OAAQP,EAAEG,OAAOC,SAASC,YAAYC,OAC3D,EAMO,WACI,kBAAOE,KAAK,OAAOhC,GAAG,cAAciC,YAAY,mBAChD,mBAAQD,KAAK,SAAb,uBAGkB,IAArBrB,EAAUd,SAAgB,SAAC,IAAD,CAAYF,WAAYgB,EAAWf,SAAUA,MAGnF,C,8FCjDKsC,EAAU,mCAEVC,EAAmB,mCAAG,oGACDC,EAAAA,EAAAA,IAAA,kEAAqEF,IADpE,WAClBG,EADkB,QAEVC,KAAKlB,QAFK,yCAGbmB,QAAQC,OAAO,IAAIC,MAAM,+CAHZ,gCAKjBJ,EAASC,KAAKlB,SALG,2CAAH,qDAQnBsB,EAAc,mCAAG,WAAO1C,GAAP,uFACIoC,EAAAA,EAAAA,IAAA,6CAAgDpC,EAAhD,oBAA8DkC,EAA9D,oBADJ,WACbG,EADa,QAGLC,KAHK,yCAIRC,QAAQC,OAAO,IAAIC,MAAM,+CAJjB,gCAMZJ,EAASC,MANG,2CAAH,sDASdK,EAAe,mCAAG,WAAOb,GAAP,uFACGM,EAAAA,EAAAA,IAAA,4DAA+DF,EAA/D,iCAA+FJ,EAA/F,gCADH,WACdO,EADc,QAGNC,KAHM,yCAITC,QAAQC,OAAO,IAAIC,MAAM,+CAJhB,gCAMbJ,EAASC,MANI,2CAAH,sDASfM,EAAS,mCAAG,WAAO5C,GAAP,uFACSoC,EAAAA,EAAAA,IAAA,6CAAgDpC,EAAhD,4BAAsEkC,EAAtE,oBADT,WACRG,EADQ,QAGAC,KAHA,yCAIHC,QAAQC,OAAO,IAAIC,MAAM,+CAJtB,gCAMPJ,EAASC,MANF,2CAAH,sDASTO,EAAY,mCAAG,WAAO7C,GAAP,uFACMoC,EAAAA,EAAAA,IAAA,6CAAgDpC,EAAhD,4BAAsEkC,EAAtE,oBADN,WACXG,EADW,QAGHC,KAHG,yCAINC,QAAQC,OAAO,IAAIC,MAAM,+CAJnB,gCAMVJ,EAASC,MANC,2CAAH,sDASLpB,EAAM,CAAEiB,oBAAAA,EAAqBO,eAAAA,EAAgBC,gBAAAA,EAAiBC,UAAAA,EAAWC,aAAAA,E","sources":["webpack://react-homework-template/./src/components/ListMovies/ListMovies.module.css?08bb","components/ListMovies/ListMovies.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ListMovies_item__lLotJ\"};","import { Link } from \"react-router-dom\";\nimport css from \"./ListMovies.module.css\";\nimport PropTypes from 'prop-types';\n\n\nconst ListMovies = ({ listMovies, location }) => {\n    return (\n        <>\n            <ul>\n                {listMovies.length && listMovies.map(({ title, id }) =>\n                    <li key={id} className={css.item}>\n                        <Link to={`/movies/${id}`} state={{ from: location }}>{title}</Link>\n                    </li>\n                )}\n            </ul>\n        </>\n    )\n};\n\nexport default ListMovies;\n\nListMovies.propTypes = {\n    listMovies: PropTypes.array.isRequired,\n    location: PropTypes.object.isRequired,\n}","import ListMovies from \"components/ListMovies/ListMovies\";\nimport Notiflix from \"notiflix\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport { Api } from \"services/api\";\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [listMovie, setListMovie] = useState([])\n    const location = useLocation()\n    console.log(searchParams.get(\"quvery\"))\n\n    useEffect(() => {\n        if (!searchParams.get(\"quvery\")) {\n            return\n        };\n\n        async function getData() {\n            try {\n                const getData = await Api.fetchMovieQuery(searchParams.get(\"quvery\"))\n                setListMovie(getData.results)\n                // console.log(searchParams.get(\"quvery\"))\n            } catch (error) {\n                Notiflix.Notify.warning(error.message);\n            } finally {\n                // setIsVizibleLoadMore(false);\n            }\n        };\n\n        getData();\n\n    }, [searchParams])\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        console.dir(e.target.elements.searchValue.value)\n        setSearchParams({ quvery: e.target.elements.searchValue.value })\n    }\n\n\n    return (\n        <div className=\"section\">\n\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" id=\"searchValue\" placeholder=\"search movies\" />\n                <button type=\"submit\">search</button>\n            </form>\n\n            {listMovie.length !== 0 && <ListMovies listMovies={listMovie} location={location} />}\n        </div>\n    )\n};\n\nexport default Movies;","import axios from \"axios\";\n\nconst KEYTMDB = \"d3e87ea049b6b9a39016714042d8b78c\"\n\nconst fetchTrendingMovies = async () => {\n    const response = await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${KEYTMDB}`);\n    if (!response.data.results) {\n        return Promise.reject(new Error(\"Sorry! There is no photo at your request.\"))\n    }\n    return response.data.results;\n};\n\nconst fetchMovieById = async (id) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${KEYTMDB}&language=en-US`);\n    // console.log(response)\n    if (!response.data) {\n        return Promise.reject(new Error(\"Sorry! There is no photo at your request.\"))\n    }\n    return response.data;\n};\n\nconst fetchMovieQuery = async (value) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${KEYTMDB}&language=en-US&query=${value}&page=1&include_adult=false`);\n    // console.log(response)\n    if (!response.data) {\n        return Promise.reject(new Error(\"Sorry! There is no photo at your request.\"))\n    }\n    return response.data;\n};\n\nconst fetchCast = async (id) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${KEYTMDB}&language=en-US`);\n    // console.log(response)\n    if (!response.data) {\n        return Promise.reject(new Error(\"Sorry! There is no photo at your request.\"))\n    }\n    return response.data;\n};\n\nconst fetchReviews = async (id) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${KEYTMDB}&language=en-US`);\n    // console.log(response)\n    if (!response.data) {\n        return Promise.reject(new Error(\"Sorry! There is no photo at your request.\"))\n    }\n    return response.data;\n};\n\nexport const Api = { fetchTrendingMovies, fetchMovieById, fetchMovieQuery, fetchCast, fetchReviews };"],"names":["listMovies","location","length","map","title","id","className","css","Link","to","state","from","useSearchParams","searchParams","setSearchParams","useState","listMovie","setListMovie","useLocation","console","log","get","useEffect","Api","getData","results","Notiflix","message","onSubmit","e","preventDefault","dir","target","elements","searchValue","value","quvery","type","placeholder","KEYTMDB","fetchTrendingMovies","axios","response","data","Promise","reject","Error","fetchMovieById","fetchMovieQuery","fetchCast","fetchReviews"],"sourceRoot":""}